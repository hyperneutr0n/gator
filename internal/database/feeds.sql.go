// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: feeds.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, user_id, name, url, created_at, updated_at, last_fetched_at) 
VALUES(
    DEFAULT,
    $1,
    $2,
    $3,
    DEFAULT,
    DEFAULT,
    NULL
)
RETURNING id, user_id, name, url, created_at, updated_at, last_fetched_at
`

type CreateFeedParams struct {
	UserID uuid.UUID
	Name   string
	Url    string
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed, arg.UserID, arg.Name, arg.Url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
	)
	return i, err
}

const getFeed = `-- name: GetFeed :one
SELECT f.id, f.user_id, f.name, f.url, f.created_at, f.updated_at, f.last_fetched_at, u.name AS user_name
FROM feeds AS f
INNER JOIN users AS u
ON u.id = f.user_id
WHERE f.url = $1
`

type GetFeedRow struct {
	ID            int32
	UserID        uuid.UUID
	Name          string
	Url           string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) GetFeed(ctx context.Context, url string) (GetFeedRow, error) {
	row := q.db.QueryRowContext(ctx, getFeed, url)
	var i GetFeedRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastFetchedAt,
		&i.UserName,
	)
	return i, err
}

const getFeeds = `-- name: GetFeeds :many
SELECT f.id, f.user_id, f.name, f.url, f.created_at, f.updated_at, f.last_fetched_at, u.name AS user_name
FROM feeds AS f
INNER JOIN users AS u
ON u.id = f.user_id
`

type GetFeedsRow struct {
	ID            int32
	UserID        uuid.UUID
	Name          string
	Url           string
	CreatedAt     time.Time
	UpdatedAt     time.Time
	LastFetchedAt sql.NullTime
	UserName      string
}

func (q *Queries) GetFeeds(ctx context.Context) ([]GetFeedsRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeeds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedsRow
	for rows.Next() {
		var i GetFeedsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
			&i.UserName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNextFeedToFetch = `-- name: GetNextFeedToFetch :many
SELECT id, user_id, name, url, created_at, updated_at, last_fetched_at FROM feeds ORDER BY last_fetched_at ASC NULLS FIRST
`

func (q *Queries) GetNextFeedToFetch(ctx context.Context) ([]Feed, error) {
	rows, err := q.db.QueryContext(ctx, getNextFeedToFetch)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Feed
	for rows.Next() {
		var i Feed
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.LastFetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markFeedFetched = `-- name: MarkFeedFetched :exec
UPDATE feeds 
SET updated_at = DEFAULT, last_fetched_at = DEFAULT
WHERE id = $1
`

func (q *Queries) MarkFeedFetched(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, markFeedFetched, id)
	return err
}
